#
# Copyright (c) The acados authors.
#
# This file is part of acados.
#
# The 2-Clause BSD License
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.;
#

{%- if solver_options.qp_solver %}
    {%- set qp_solver = solver_options.qp_solver %}
{%- else %}
    {%- set qp_solver = "FULL_CONDENSING_HPIPM" %}
{%- endif %}

{%- if solver_options.N_horizon %}
    {%- set N_horizon = solver_options.N_horizon %}
{%- else %}
    {%- set N_horizon = 1 %}
{%- endif %}

{%- if solver_options.hessian_approx %}
    {%- set hessian_approx = solver_options.hessian_approx %}
{%- elif solver_options.sens_hess %}
    {%- set hessian_approx = "EXACT" %}
{%- else %}
    {%- set hessian_approx = "GAUSS_NEWTON" %}
{%- endif %}

{%- if solver_options.model_external_shared_lib_dir %}
    {%- set model_external_shared_lib_dir = solver_options.model_external_shared_lib_dir %}
{%- endif %}

{%- if solver_options.model_external_shared_lib_name %}
    {%- set model_external_shared_lib_name = solver_options.model_external_shared_lib_name %}
{%- endif %}

{#- control operator #}
{%- if os and os == "pc" %}
    {%- set control = "&" %}
{%- else %}
    {%- set control = ";" %}
{%- endif %}

{%- if acados_link_libs and os and os == "pc" %}{# acados linking libraries and flags #}
    {%- set link_libs = acados_link_libs.qpoases ~ " " ~ acados_link_libs.hpmpc ~ " " ~ acados_link_libs.osqp ~ " " ~ acados_link_libs.daqp -%}
    {%- set openmp_flag = acados_link_libs.openmp %}
{%- else %}
    {%- set openmp_flag = " " %}
    {%- if qp_solver == "FULL_CONDENSING_QPOASES" %}
        {%- set link_libs = "-lqpOASES_e" %}
    {%- elif qp_solver == "FULL_CONDENSING_DAQP" %}
        {%- set link_libs = "-ldaqp" %}
    {%- else %}
        {%- set link_libs = "" %}
    {%- endif %}
{%- endif %}

# declare a cache var, default empty

cmake_minimum_required(VERSION 3.13)
set(CMAKE_SUPPRESS_DEVELOPER_WARNINGS TRUE CACHE BOOL "")
project({{ model.name }})

# build options.
{% if problem_class != "SIM" %}
option(BUILD_ACADOS_SOLVER_LIB "Should the solver library acados_solver_{{ model.name }} be build?" OFF)
option(BUILD_ACADOS_OCP_SOLVER_LIB "Should the OCP solver library acados_ocp_solver_{{ model.name }} be build?" OFF)
option(BUILD_EXAMPLE "Should the example main_{{ model.name }} be build?" OFF)
{%- endif %}


{%- if solver_options.integrator_type != "DISCRETE" and N_horizon > 0 %}
option(BUILD_SIM_EXAMPLE "Should the simulation example main_sim_{{ model.name }} be build?" OFF)
option(BUILD_ACADOS_SIM_SOLVER_LIB "Should the simulation solver library acados_sim_solver_{{ model.name }} be build?" OFF)
{%- endif %}


if(CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND CMAKE_SYSTEM_NAME MATCHES "Windows")
    # MinGW: remove prefix and change suffix to match MSVC
    # (such that MATLAB mex recognizes the libraries)
    set(CMAKE_SHARED_LIBRARY_PREFIX "")
    set(CMAKE_IMPORT_LIBRARY_SUFFIX ".lib")
    set(CMAKE_IMPORT_LIBRARY_PREFIX "")
    set(CMAKE_STATIC_LIBRARY_SUFFIX ".lib")
    set(CMAKE_STATIC_LIBRARY_PREFIX "")
endif()


if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE {{ code_export_directory | replace(from="\", to="/") }})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE {{ code_export_directory | replace(from="\", to="/") }})
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE {{ code_export_directory | replace(from="\", to="/") }})
endif()

if(COMMAND FindOrFetch)
  return()
endif()

macro(FindOrFetch)
  if(NOT FetchContent)
    include(FetchContent)
  endif()

  # Parse arguments.
  set(options EXCLUDE_FROM_ALL)
  set(one_value_args
      USE_SYSTEM_PACKAGE
      PACKAGE_NAME
      LIBRARY_NAME
      GIT_REPO
      GIT_TAG
  )
  set(multi_value_args PATCH_COMMAND TARGETS)
  cmake_parse_arguments(
    _ARGS
    "${options}"
    "${one_value_args}"
    "${multi_value_args}"
    ${ARGN}
  )

  # Check if all targets are found.
  if(NOT _ARGS_TARGETS)
    message(FATAL_ERROR "mujoco::FindOrFetch: TARGETS must be specified.")
  endif()

  set(targets_found TRUE)
  message(CHECK_START
          "mujoco::FindOrFetch: checking for targets in package `${_ARGS_PACKAGE_NAME}`"
  )
  foreach(target ${_ARGS_TARGETS})
    if(NOT TARGET ${target})
      message(CHECK_FAIL "target `${target}` not defined.")
      set(targets_found FALSE)
      break()
    endif()
  endforeach()

  # If targets are not found, use `find_package` or `FetchContent...` to get it.
  if(NOT targets_found)
    if(${_ARGS_USE_SYSTEM_PACKAGE})
      message(CHECK_START
              "mujoco::FindOrFetch: finding `${_ARGS_PACKAGE_NAME}` in system packages..."
      )
      find_package(${_ARGS_PACKAGE_NAME} REQUIRED)
      message(CHECK_PASS "found")
    else()
      message(CHECK_START
              "mujoco::FindOrFetch: Using FetchContent to retrieve `${_ARGS_LIBRARY_NAME}`"
      )
      FetchContent_Declare(
        ${_ARGS_LIBRARY_NAME}
        GIT_REPOSITORY ${_ARGS_GIT_REPO}
        GIT_TAG ${_ARGS_GIT_TAG}
        GIT_SHALLOW FALSE
        PATCH_COMMAND ${_ARGS_PATCH_COMMAND}
        UPDATE_DISCONNECTED TRUE
      )
      if(${_ARGS_EXCLUDE_FROM_ALL})
        FetchContent_GetProperties(${_ARGS_LIBRARY_NAME})
        if(NOT ${${_ARGS_LIBRARY_NAME}_POPULATED})
          FetchContent_Populate(${_ARGS_LIBRARY_NAME})
          add_subdirectory(
            ${${_ARGS_LIBRARY_NAME}_SOURCE_DIR} ${${_ARGS_LIBRARY_NAME}_BINARY_DIR}
            EXCLUDE_FROM_ALL
          )
        endif()
      else()
        FetchContent_MakeAvailable(${_ARGS_LIBRARY_NAME})
      endif()
      message(CHECK_PASS "Done")
    endif()
  else()
    message(CHECK_PASS "found")
  endif()
endmacro()
set(MODEL_XML_PATH "{{ solver_options.mujoco_model_path }}" CACHE STRING "Full path to your MuJoCo XML model")
set(FD_EPS {{ solver_options.mujoco_fd_eps }} CACHE STRING "Finite Difference eps")

# bake that into the compile line
add_compile_definitions(
    MODEL_XML_PATH=\"${MODEL_XML_PATH}\"
    FD_EPS=${FD_EPS}
)
# 2) force‐clone the exact tag we want  
option(USE_SYSTEM_MUJOCO      "Allow using system-installed MuJoCo" OFF)  
set(MUJOCO_MPC_MUJOCO_GIT_TAG
    088079eff0450e32b98ee743141780ed68307506
    CACHE STRING "Git revision for MuJoCo."
)

findorfetch(  
  USE_SYSTEM_PACKAGE   ${USE_SYSTEM_MUJOCO}  
  PACKAGE_NAME         mujoco  
  LIBRARY_NAME         mujoco  
  GIT_REPO             https://github.com/google-deepmind/mujoco.git  
  GIT_TAG              ${MUJOCO_MPC_MUJOCO_GIT_TAG}  
  TARGETS              mujoco::mujoco  
  EXCLUDE_FROM_ALL  
)
# object target names
{%- if problem_class == "SIM" or solver_options.N_horizon > 0 %}
set(MODEL_OBJ model_{{ model.name }})
{%- endif %}
set(OCP_OBJ ocp_{{ model.name }})
{%- if solver_options.integrator_type != "DISCRETE" and N_horizon > 0 %}
set(SIM_OBJ sim_{{ model.name }})
{%- endif %}

{%- if problem_class == "SIM" or solver_options.N_horizon > 0 %}
# model
set(MODEL_SRC
{%- for filename in external_function_files_model %}
    {{ filename }}
{%- endfor %}
)
add_library(${MODEL_OBJ} OBJECT ${MODEL_SRC} )
{%- endif %}

{% if problem_class != "SIM" %}
# optimal control problem - mostly CasADi exports
if(${BUILD_ACADOS_SOLVER_LIB} OR ${BUILD_ACADOS_OCP_SOLVER_LIB} OR ${BUILD_EXAMPLE})
    set(OCP_SRC
{% for filename in external_function_files_ocp %}
        {{ filename }}
{%- endfor %}
{%- if solver_options.custom_update_filename %}
    {%- if solver_options.custom_update_filename != "" %}
        {{ solver_options.custom_update_filename }}
    {%- endif %}
{%- endif %}
        acados_solver_{{ model.name }}.c
    )
    add_library(${OCP_OBJ} OBJECT ${OCP_SRC})
endif()
{%- endif %}

{%- if solver_options.integrator_type != "DISCRETE" and N_horizon > 0 %}
# for sim solver
if(${BUILD_ACADOS_SOLVER_LIB} OR ${BUILD_EXAMPLE}
    {%- if solver_options.integrator_type != "DISCRETE" and N_horizon > 0 %}
    OR ${BUILD_SIM_EXAMPLE} OR ${BUILD_ACADOS_SIM_SOLVER_LIB}
    {%- endif -%}
    )
    set(SIM_SRC acados_sim_solver_{{ model.name }}.c)
    add_library(${SIM_OBJ} OBJECT ${SIM_SRC})
endif()
{%- endif %}


  {%- if problem_class != "SIM" %}
# for target example
set(EX_SRC main_{{ model.name }}.c)
set(EX_EXE main_{{ model.name }})
  {%- endif %}

{%- if model_external_shared_lib_dir and model_external_shared_lib_name %}
set(EXTERNAL_DIR {{ model_external_shared_lib_dir | replace(from="\", to="/")  }})
set(EXTERNAL_LIB {{ model_external_shared_lib_name }})
{%- else %}
set(EXTERNAL_DIR)
set(EXTERNAL_LIB)
{%- endif %}

# set some search paths for preprocessor and linker
set(ACADOS_INCLUDE_PATH {{ acados_include_path | replace(from="\", to="/")  }} CACHE PATH "Define the path which contains the include directory for acados.")
set(ACADOS_LIB_PATH {{ acados_lib_path | replace(from="\", to="/") }} CACHE PATH "Define the path which contains the lib directory for acados.")

# c-compiler flags for debugging
set(CMAKE_C_FLAGS_DEBUG "-O0 -ggdb")

set(CMAKE_C_FLAGS "-fPIC -std=c99 {{ openmp_flag }} {{ solver_options.ext_fun_compile_flags | replace(from="\", to="/") }} {{ " " }}
{%- if qp_solver == "FULL_CONDENSING_QPOASES" -%}
    -DACADOS_WITH_QPOASES
{%- endif -%}
{%- if qp_solver == "FULL_CONDENSING_DAQP" -%}
    -DACADOS_WITH_DAQP
{%- endif -%}
{%- if qp_solver == "PARTIAL_CONDENSING_OSQP" -%}
    -DACADOS_WITH_OSQP
{%- endif -%}
{%- if qp_solver == "PARTIAL_CONDENSING_QPDUNES" -%}
    -DACADOS_WITH_QPDUNES
{%- endif -%}
{%- if solver_options.with_batch_functionality -%}
    -fopenmp
{%- endif -%}
")
#-fno-diagnostics-show-line-numbers -g

include_directories(
   ${ACADOS_INCLUDE_PATH}
   ${ACADOS_INCLUDE_PATH}/acados
   ${ACADOS_INCLUDE_PATH}/blasfeo/include
   ${ACADOS_INCLUDE_PATH}/hpipm/include
{%- if qp_solver == "FULL_CONDENSING_QPOASES" %}
   ${ACADOS_INCLUDE_PATH}/qpOASES_e/
{%- endif %}
{%- if qp_solver == "FULL_CONDENSING_DAQP" %}
   ${ACADOS_INCLUDE_PATH}/daqp/include
{%- endif %}
   $<TARGET_PROPERTY:mujoco::mujoco,INTERFACE_INCLUDE_DIRECTORIES>
)

# linker flags
link_directories(${ACADOS_LIB_PATH})

# link to libraries
if(UNIX)
    link_libraries(acados hpipm blasfeo m {{ link_libs }})
else()
    link_libraries(acados hpipm blasfeo {{ link_libs }})
endif()

# the targets

  {%- if problem_class != "SIM" %}
# bundled_shared_lib
if(${BUILD_ACADOS_SOLVER_LIB})
    set(LIB_ACADOS_SOLVER acados_solver_{{ model.name }})
    add_library(${LIB_ACADOS_SOLVER} SHARED
    {%- if solver_options.N_horizon > 0 %}
    $<TARGET_OBJECTS:${MODEL_OBJ}>
    {%- endif %}
    $<TARGET_OBJECTS:${OCP_OBJ}>
    {%- if solver_options.integrator_type != "DISCRETE" and N_horizon > 0 %}
        $<TARGET_OBJECTS:${SIM_OBJ}>
    {%- endif -%}
    )
    install(TARGETS ${LIB_ACADOS_SOLVER} DESTINATION ${CMAKE_INSTALL_PREFIX})
endif(${BUILD_ACADOS_SOLVER_LIB})

# ocp_shared_lib
if(${BUILD_ACADOS_OCP_SOLVER_LIB})
    set(LIB_ACADOS_OCP_SOLVER acados_ocp_solver_{{ model.name }})
    add_library(${LIB_ACADOS_OCP_SOLVER} SHARED
    {%- if solver_options.N_horizon > 0 %}
    $<TARGET_OBJECTS:${MODEL_OBJ}>
    {%- endif %}
    $<TARGET_OBJECTS:${OCP_OBJ}>)
    # Specify libraries or flags to use when linking a given target and/or its dependents.
    target_link_libraries(${LIB_ACADOS_OCP_SOLVER} PRIVATE ${EXTERNAL_LIB} mujoco::mujoco)
    target_link_directories(${LIB_ACADOS_OCP_SOLVER} PRIVATE ${EXTERNAL_DIR} ${MUJOCO_INCLUDE})
    install(TARGETS ${LIB_ACADOS_OCP_SOLVER} DESTINATION ${CMAKE_INSTALL_PREFIX})
endif(${BUILD_ACADOS_OCP_SOLVER_LIB})

# example
if(${BUILD_EXAMPLE})
    add_executable(${EX_EXE} ${EX_SRC}
    {%- if solver_options.N_horizon > 0 %}
    $<TARGET_OBJECTS:${MODEL_OBJ}>
    {%- endif %}
    $<TARGET_OBJECTS:${OCP_OBJ}>
    {%- if solver_options.integrator_type != "DISCRETE" and N_horizon > 0 %}
        $<TARGET_OBJECTS:${SIM_OBJ}>
    {%- endif -%}
    )
    install(TARGETS ${EX_EXE} DESTINATION ${CMAKE_INSTALL_PREFIX})
endif(${BUILD_EXAMPLE})
  {%- endif %}

{% if solver_options.integrator_type != "DISCRETE" and N_horizon > 0 -%}
# example_sim
if(${BUILD_SIM_EXAMPLE})
    set(EX_SIM_SRC main_sim_{{ model.name }}.c)
    set(EX_SIM_EXE main_sim_{{ model.name }})
    add_executable(${EX_SIM_EXE} ${EX_SIM_SRC} $<TARGET_OBJECTS:${MODEL_OBJ}> $<TARGET_OBJECTS:${SIM_OBJ}>)
    install(TARGETS ${EX_SIM_EXE} DESTINATION ${CMAKE_INSTALL_PREFIX})
endif(${BUILD_SIM_EXAMPLE})

# sim_shared_lib
if(${BUILD_ACADOS_SIM_SOLVER_LIB})
    set(LIB_ACADOS_SIM_SOLVER acados_sim_solver_{{ model.name }})
    add_library(${LIB_ACADOS_SIM_SOLVER} SHARED $<TARGET_OBJECTS:${MODEL_OBJ}> $<TARGET_OBJECTS:${SIM_OBJ}>)
    install(TARGETS ${LIB_ACADOS_SIM_SOLVER} DESTINATION ${CMAKE_INSTALL_PREFIX})
endif(${BUILD_ACADOS_SIM_SOLVER_LIB})
{%- endif %}
if(${BUILD_ACADOS_OCP_SOLVER_LIB})
  install(CODE "message(STATUS \"Installing ACADOS OCP solver shared libraries from ${CMAKE_CURRENT_SOURCE_DIR}/build/lib to ${ACADOS_LIB_PATH}\")")
  install(
    DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/build/lib/"   # or CMAKE_CURRENT_BINARY_DIR if generated there
    DESTINATION ${ACADOS_LIB_PATH}                                 # relative to ${CMAKE_INSTALL_PREFIX}
    FILES_MATCHING
      PATTERN "*.so*"
      PATTERN "*.dylib"  # if you also want macOS .dylib
  )
endif(${BUILD_ACADOS_OCP_SOLVER_LIB})
# unset options for clean cmake cache on subsequent cmake runs
  {%- if problem_class != "SIM" %}
unset(BUILD_ACADOS_SOLVER_LIB CACHE)
unset(BUILD_ACADOS_OCP_SOLVER_LIB CACHE)
unset(BUILD_EXAMPLE CACHE)
  {%- endif %}
{%- if solver_options.integrator_type != "DISCRETE" and N_horizon > 0 %}
unset(BUILD_SIM_EXAMPLE CACHE)
unset(BUILD_ACADOS_SIM_SOLVER_LIB CACHE)
{%- endif %}
